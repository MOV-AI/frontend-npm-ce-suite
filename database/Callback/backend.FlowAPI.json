{
    "Callback": {
        "backend.FlowAPI": {
            "Code": "\"\"\"\n   Copyright (C) Mov.ai  - All Rights Reserved\n   Unauthorized copying of this file, via any medium is strictly prohibited\n   Proprietary and confidential\n\n   Developers:\n   - Manuel Silva  (manuel.silva@mov.ai) - 2020\n\"\"\"\n\nfrom API2.Flow import Flow as DFlow  #deprecated Flow class\nfrom API2.StateMachine import StateMachine as DStateMachine  #deprecated StateMachine class\nfrom movai.data.scope import ScopesTree\n\n\n'''\n     Support to continue using the previous api\n'''\ndef getCls(className):\n    depClasses = {\"Flow\": DFlow, \"StateMachine\": DStateMachine}\n    return depClasses[className]\n\ndef saveFlowLayers(flowId, layers, **ignore):\n    \"\"\" Save the flow layers (Flow only)\"\"\"\n\n    response = {\"success\": False}\n\n    try:\n        inst = getCls(\"Flow\")(flowId)\n        inst.Layers.update(layers)\n        response = {\"success\": True}\n\n    except Exception as e:\n        raise\n\n    return response\n\ndef deleteLayer(flowId, layer, **ignore):\n    \"\"\" Delete specific layer and remove from NodeLayers (Flow only)\"\"\"\n\n    response = {\"success\": False}\n\n    try:\n        flowInst = getCls(\"Flow\")(flowId)\n        if layer in flowInst.Layers:\n\n            # delete the layer\n            del flowInst.Layers[layer]\n\n            # check if there are any nodes in the deleted layer\n            for nodeName, nodeValue in flowInst.NodeInst.items():\n                if nodeValue.NodeLayers:\n                    if layer in nodeValue.NodeLayers:\n                        newLayers = nodeValue.NodeLayers\n                        newLayers.remove(layer)\n                        nodeValue.NodeLayers = newLayers\n\n        response = {\"success\": True}\n\n    except Exception:\n        raise\n\n    return response\n\t\ndef deleteNodeInst(scope, flowId, nodeId, nodeType = \"MovAI/State\", **ignore):\n    \"\"\" delete nodeInst or State and related links\"\"\"\n\n    response = {\"success\": False}\n\n    nodeInstNames = {\"Flow\": \"NodeInst\", \"StateMachine\": \"State\"}\n    if nodeType == \"MovAI/Flow\":\n        nodeInstNames[\"Flow\"] = \"Container\"\n    \n    try:\n        inst = getCls(scope)(flowId)\n        inst.delete(nodeInstNames[scope], nodeId)\n        response = {\"success\": True}\n\n    except Exception as e:\n        raise\n\n    return response\n\t\ndef deleteLink(scope, flowId, linkId, **ignore):\n    \"\"\" Delete the link \"\"\"\n\n    response = {\"success\": False}\n\n    try:\n        inst = getCls(scope)(flowId)\n        if inst.delete_link(linkId):\n            response[\"success\"] = True\n            response[\"id\"] = linkId\n            response[\"validate\"] = inst.is_valid()\n        else:\n            raise Exception(\"Could not delete link\")\n            \n    except KeyError:\n        pass\n\n    except Exception as e:\n        raise\n\n    return response\n\t\ndef addLink(scope, flowId, link, **ignore):\n    \"\"\" Add a new link \"\"\"\n\n    response = {\"links\": {}, \"validate\": {}, \"success\": False}\n\n    try:\n        inst = getCls(scope)(flowId)\n        res = inst.add_link(**link) # (_id, link)\n\n        if len(res) == 2:\n            response[\"success\"] = True\n            response[\"links\"] = [{\"name\": res[0], \"value\": res[1]}]\n            response[\"validate\"] = inst.is_valid()\n        else:\n            raise Exception(\"Could not create link\")\n            \n    except KeyError:\n        pass\n\n    except Exception:\n        raise\n\n    return response\n\n\ndef setNodePos(scope, flowId, nodeId, data, nodeType=\"\", **ignore):\n    ''' Set node new position '''\n\n    nodeInstNames = {\"Flow\": \"NodeInst\", \"StateMachine\": \"State\"}\n    response = {\"success\": False}\n\n    try:\n        obj = getCls(scope)(flowId)\n        pos = (data.get(\"x\", None), data.get(\"y\", None))\n        if pos[0] and pos[1]:\n            # if the node is a Container\n            if nodeType == \"MovAI/Flow\":\n                nodeObj = getattr(obj, \"Container\")[nodeId]\n                nodeObj.Visualization = [pos[0].get(\"Value\", 0), pos[1].get(\"Value\", 0)]\n            else:\n                nodeObj = getattr(obj, nodeInstNames[scope])[nodeId]\n                nodeObj.Visualization[\"x\"].Value = pos[0].get(\"Value\", 0)\n                nodeObj.Visualization[\"y\"].Value = pos[1].get(\"Value\", 0)\n            response = {\"success\": True}\n        else:\n            response = {\"success\": False, \"error\": \"Invalid position\"}\n    except Exception:\n        raise\n    return response\n    \ndef setLinkDependency(flowId, linkId, dependency, **ignore):\n    ''' Set the link dependecy level (Flow only) '''\n\n    try:\n        inst = getCls(\"Flow\")(flowId)\n        link = inst.Links[linkId]\n        link[\"Dependency\"] = dependency\n        inst.Links[linkId] = link\n        return {\"success\": True}\n    except Exception:\n        raise\n    \n# new api alternative\ndef _setLinkDependency(flowId, linkId, dependency, **ignore):\n    ''' Set the link dependecy level (Flow only) '''\n\n    try:\n        Flow(flowId).Links[linkId].Dependency = dependency\n        return {\"success\": True}\n    except Exception:\n        raise\n    \ndef copyNodeInst(scope, orgFlow, copyFlow, copyName, orgName, orgType, copyPosX, copyPosY, copyParams, **ignore):\n    ''' \n        Copy a NodeInst, Container or State from orgFlow to copyflow\n    '''\n    \n    label = {\"NodeInst\": \"NodeLabel\", \"Container\": \"ContainerLabel\", \"State\": \"StateLabel\"}\n    response = {\"success\": False}\n    \n    try:\n\n        # flow to update\n        toFlow = getattr(scopes(), scope)[copyFlow]\n        \n        # flow to get data from\n        fromFlow = getattr(scopes(), scope)[orgFlow]\n\n        if orgType == \"NodeInst\" or orgType == \"State\":\n            options = {\"Visualization\": {\"x\": {\"Value\": copyPosX}, \"y\": {\"Value\": copyPosY}}}\n        else:\n            options = {\"Visualization\": [copyPosX, copyPosY], \"Parameter\": copyParams }\n            \n        # can be NodeInst, Container or State\n        nodeToCopy = getattr(fromFlow, orgType)[orgName].serialize()\n        \n        # update position\n        nodeToCopy.update(options)\n        \n        # update label\n        nodeToCopy[label[orgType]] = copyName\n        \n        # save changes\n        scopes().write({orgType: { copyName: { **nodeToCopy }}}, scope=scope, ref=toFlow.ref)\n        \n        # manually updates cached object\n        toFlow[orgType][copyName] = nodeToCopy\n        \n        response[\"success\"] = True\n        response[\"error\"] = None\n\n    except Exception:\n        raise\n\n    return response\n\n\n# ----------------------------------------------------------------------\nkey2action_map = {\n\t\"deleteNodeInst\"   : deleteNodeInst,\n\t\"saveFlowLayers\"   : saveFlowLayers,\n\t\"deleteLayer\"      : deleteLayer,\n\t\"deleteLink\"       : deleteLink,\n\t\"addLink\"          : addLink,\n\t\"setNodePos\"       : setNodePos,\n\t\"setLinkDependency\": setLinkDependency,\n\t\"copyNodeInst\"     : copyNodeInst\n}\n\ntry:\n    # key to responses\n\tkey = msg[\"func\"]\n\t\n\t# override scopes imported from movai.data\n\tscopes = ScopesTree()\n\t\n\t# arguments to pass\n\targs = msg.get(\"args\", {})\n\t\n\tresult = key2action_map[key](**args)\n\tresponse = {\"func\": key, \"success\": True}\n\t\n\t# update response with output from responses method\n\tresponse.update(result)\n\nexcept Exception as e:\n    import traceback\n    traceback.print_exc()\n    exc_result = f\"{type(e).__name__} {str(e)}\"\n    response = {\"success\": False, \"error\": exc_result}\n\t",
            "Info": "",
            "Label": "backend.FlowAPI",
            "LastUpdate": {
                "date": "31/05/2021 at 14:00:17",
                "user": "movai"
            },
            "Message": "",
            "User": "joao",
            "Version": "",
            "VersionDelta": {}
        }
    }
}